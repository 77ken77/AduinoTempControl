#define RAW_BUFFER_LENGTH 750   // must match your longest raw sequence
#include <IRremote.hpp>

// Arduino pin driving the IR LED (through your 2N2222)
constexpr uint8_t IR_SEND_PIN = 3;

// —————————————————————————————————————————————————
//  RAW DATA ARRAYS (in PROGMEM)
// —————————————————————————————————————————————————
const uint16_t acOnRaw[] PROGMEM = {
    9050, 4350, 650, 500, 600, 500, 650, 500, 600, 1650, 650, 450,
    650, 450, 700, 500, 600, 500, 600, 1650, 600, 500, 650, 450,
    650, 1600, 650, 1600, 650, 500, 600, 500, 650, 500, 600, 500,
    650, 500, 600, 500, 650, 1550, 700, 500, 600, 500, 650, 500,
    600, 500, 650, 500, 600, 500, 650, 450, 650, 500, 650, 1550,
    700, 450, 650, 500, 650, 450, 650, 500, 650, 450, 650, 1600,
    650, 1550, 700, 450, 650, 500, 650, 450, 650, 500, 650
};

// Raw timings for “OFF” command, stored in flash (PROGMEM)
const uint16_t acOffRaw[] PROGMEM = {
    8950, 4400, 650, 500, 600, 550, 550, 600, 600, 500, 600, 550,
    600, 500, 600, 550, 550, 550, 600, 1650, 550, 600, 600, 500,
    600, 1650, 550, 1650, 600, 550, 600, 500, 600, 550, 600, 550,
    600, 500, 600, 550, 600, 1600, 600, 550, 600, 500, 600, 550,
    550, 600, 500, 600, 600, 550, 550, 550, 550, 600, 550, 1650,
    550, 600, 550, 600, 500, 600, 600, 550, 550, 550, 600, 1650,
    550, 1650, 600, 550, 600, 550, 600, 500, 600, 550, 600
};

const uint16_t AC24Raw[] PROGMEM = {
    9100, 4300, 700, 450, 650, 500, 650, 450, 700, 1550, 650, 500,
    650, 450, 650, 500, 650, 450, 650, 1600, 650, 450, 750, 400,
    650, 1600, 650, 1550, 650, 500, 650, 450, 650, 500, 650, 450,
    650, 500, 700, 450, 600, 1600, 650, 500, 650, 450, 700, 450,
    650, 450, 650, 500, 650, 500, 600, 500, 700, 450, 650, 1550,
    650, 500, 650, 450, 650, 500, 650, 500, 650, 450, 650, 1600,
    650, 1550, 650, 500, 650, 450, 650, 500, 650, 500, 600
};
const uint16_t AC25Raw[] PROGMEM = {
    9000, 4350, 700, 450, 700, 450, 650, 500, 600, 1600, 650, 500,
    650, 450, 650, 500, 650, 450, 700, 450, 650, 1600, 650, 450,
    700, 1550, 650, 1550, 650, 500, 650, 450, 650, 500, 650, 500,
    650, 450, 650, 500, 650, 1550, 700, 450, 700, 400, 700, 450,
    650, 500, 650, 450, 700, 400, 700, 450, 700, 450, 650, 1550,
    700, 450, 700, 450, 650, 450, 700, 450, 650, 450, 700, 1550,
    650, 1550, 650, 500, 650, 500, 600, 500, 650, 500, 650
};
const uint16_t AC26Raw[] PROGMEM = {
    9050, 4350, 650, 500, 650, 450, 700, 450, 650, 1600, 650, 450,
    650, 500, 650, 450, 650, 500, 650, 1600, 600, 1600, 650, 450,
    700, 1550, 650, 1600, 650, 450, 650, 500, 650, 450, 700, 450,
    650, 500, 650, 450, 650, 1600, 650, 450, 700, 450, 650, 500,
    650, 450, 650, 500, 650, 450, 700, 450, 650, 450, 650, 1600,
    650, 500, 600, 500, 650, 500, 650, 450, 650, 500, 650, 1550,
    650, 1600, 650, 500, 600, 500, 650, 500, 600, 500, 650
};
const uint16_t AC27Raw[] PROGMEM = {
    9050, 4300, 650, 500, 650, 450, 700, 450, 650, 1600, 650, 500,
    600, 500, 600, 500, 650, 500, 650, 450, 650, 500, 650, 1600,
    650, 1600, 600, 1600, 650, 450, 700, 450, 650, 450, 700, 500,
    600, 500, 600, 550, 600, 1600, 650, 500, 650, 450, 650, 500,
    650, 500, 600, 500, 650, 500, 600, 500, 650, 500, 600, 1600,
    650, 500, 650, 450, 650, 500, 650, 450, 650, 500, 650, 1550,
    650, 1600, 700, 400, 700, 450, 650, 450, 700, 450, 650
};
const uint16_t AC28Raw[] PROGMEM = {
    9100, 4300, 700, 450, 650, 500, 650, 450, 700, 1550, 650, 450,
    700, 450, 650, 450, 700, 450, 700, 1550, 650, 450, 650, 1600,
    650, 1550, 600, 1650, 650, 450, 650, 500, 650, 500, 600, 500,
    650, 500, 600, 500, 650, 1600, 650, 450, 650, 500, 650, 500,
    600, 500, 650, 500, 650, 450, 650, 500, 650, 450, 650, 1550,
    700, 500, 600, 500, 650, 500, 600, 500, 650, 500, 650, 1550,
    650, 1550, 700, 450, 650, 500, 650, 450, 650, 500, 650
};
const uint16_t AC29Raw[] PROGMEM = {
    9050, 4350, 650, 500, 600, 500, 600, 550, 550, 1700, 600, 500,
    600, 550, 550, 550, 600, 550, 550, 550, 600, 1650, 550, 1700,
    600, 1600, 600, 1650, 550, 550, 600, 550, 550, 550, 600, 550,
    600, 550, 550, 550, 600, 1650, 550, 550, 600, 550, 550, 550,
    600, 550, 550, 600, 550, 550, 600, 550, 600, 500, 600, 1650,
    600, 500, 600, 550, 600, 500, 600, 550, 600, 550, 600, 1600,
    600, 1650, 600, 500, 650, 500, 650, 450, 650, 500, 650
};
const uint16_t AC30Raw[] PROGMEM = {
    9100, 4250, 750, 450, 700, 400, 700, 450, 650, 1550, 700, 450,
    700, 400, 700, 450, 650, 500, 650, 1550, 700, 1550, 650, 1550,
    700, 1550, 650, 1600, 650, 450, 650, 500, 650, 450, 650, 500,
    650, 450, 700, 450, 650, 1550, 650, 500, 650, 500, 650, 450,
    650, 500, 650, 450, 650, 500, 650, 450, 700, 450, 650, 1600,
    650, 450, 650, 500, 650, 450, 700, 450, 650, 450, 700, 1550,
    700, 1550, 600, 500, 650, 500, 650, 450, 650, 500, 650
};

/// —————————————————————————————————————————————————
//  LENGTH MACROS (no SRAM cost)
// —————————————————————————————————————————————————
#define AC_ON_LEN   (sizeof(acOnRaw)  / sizeof(acOnRaw[0]))
#define AC_OFF_LEN  (sizeof(acOffRaw) / sizeof(acOffRaw[0]))
#define AC24_LEN    (sizeof(AC24Raw)  / sizeof(AC24Raw[0]))
#define AC25_LEN    (sizeof(AC25Raw)  / sizeof(AC25Raw[0]))
#define AC26_LEN    (sizeof(AC26Raw)  / sizeof(AC26Raw[0]))
#define AC27_LEN    (sizeof(AC27Raw)  / sizeof(AC27Raw[0]))
#define AC28_LEN    (sizeof(AC28Raw)  / sizeof(AC28Raw[0]))
#define AC29_LEN    (sizeof(AC29Raw)  / sizeof(AC29Raw[0]))
#define AC30_LEN    (sizeof(AC30Raw)  / sizeof(AC30Raw[0]))

// —————————————————————————————————————————————————
//  SETUP & LOOP
// —————————————————————————————————————————————————
void setup() {
  Serial.begin(115200);
  while (!Serial);
  IrSender.begin(IR_SEND_PIN);
  Serial.println(F("AC IR Transmitter Ready"));
  Serial.println(F("Send via Serial:"));
  Serial.println(F("  1 → ON"));
  Serial.println(F("  0 → OFF"));
  Serial.println(F("  24–30 → set temp"));
}

void loop() {
  if (!Serial.available()) return;

  int cmd = Serial.parseInt();  // read integer (blocks until digit)
  Serial.print(F("Command received: "));
  Serial.println(cmd);

  switch (cmd) {
    case 1:
      Serial.println(F("→ Sending ON"));
      IrSender.sendRaw_P(acOnRaw, AC_ON_LEN, 38);
      break;
    case 0:
      Serial.println(F("→ Sending OFF"));
      IrSender.sendRaw_P(acOffRaw, AC_OFF_LEN, 38);
      break;
    case 24:
      Serial.println(F("→ Setting 24°C"));
      IrSender.sendRaw_P(AC24Raw, AC24_LEN, 38);
      break;
    case 25:
      Serial.println(F("→ Setting 25°C"));
      IrSender.sendRaw_P(AC25Raw, AC25_LEN, 38);
      break;
    case 26:
      Serial.println(F("→ Setting 26°C"));
      IrSender.sendRaw_P(AC26Raw, AC26_LEN, 38);
      break;
    case 27:
      Serial.println(F("→ Setting 27°C"));
      IrSender.sendRaw_P(AC27Raw, AC27_LEN, 38);
      break;
    case 28:
      Serial.println(F("→ Setting 28°C"));
      IrSender.sendRaw_P(AC28Raw, AC28_LEN, 38);
      break;
    case 29:
      Serial.println(F("→ Setting 29°C"));
      IrSender.sendRaw_P(AC29Raw, AC29_LEN, 38);
      break;
    case 30:
      Serial.println(F("→ Setting 30°C"));
      IrSender.sendRaw_P(AC30Raw, AC30_LEN, 38);
      break;
    default:
      Serial.println(F("! Unknown command"));
  }

  delay(100);  // small gap before next command
}
